{"ast":null,"code":"var _jsxFileName = \"/home/user23/docker2/pinly-react-project/Pinly-React/src/components/MySetting.js\";\nimport React, { useState, useCallback } from 'react';\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\nimport '../css/MySetting.css';\n\nconst MySetting = props => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n\n  const toggle = () => setDropdownOpen(!dropdownOpen);\n\n  const submenuToggle = () => setIsOpen(!isOpen);\n\n  const onMouseEnter = useCallback(() => {\n    setDropdownOpen(true);\n  }, [setDropdownOpen]);\n  const onMouseLeave = useCallback(() => {\n    setDropdownOpen(false);\n  }, [setDropdownOpen]);\n  return React.createElement(Dropdown, {\n    className: props.theme,\n    onMouseOver: onMouseEnter,\n    onMouseLeave: onMouseLeave,\n    isOpen: dropdownOpen,\n    toggle: toggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(DropdownToggle, {\n    tag: \"button\",\n    type: \"button\",\n    className: \"my-button my-setting\",\n    caret: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"fa fa-cog\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  })), React.createElement(DropdownMenu, {\n    right: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(DropdownItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(Dropdown, {\n    isOpen: isOpen,\n    toggle: submenuToggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(DropdownToggle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, \"Dropdown\"), React.createElement(DropdownMenu, {\n    modifiers: {\n      setMaxHeight: {\n        enabled: true,\n        order: 890,\n        fn: data => {\n          return { ...data,\n            styles: { ...data.styles,\n              overflow: 'auto',\n              maxHeight: '100px'\n            }\n          };\n        }\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(DropdownItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"Another Action\"), React.createElement(DropdownItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, \"Another Action\")))), React.createElement(DropdownItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"Voice Over\"), React.createElement(DropdownItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"Logout\")));\n};\n\nexport default MySetting;","map":{"version":3,"sources":["/home/user23/docker2/pinly-react-project/Pinly-React/src/components/MySetting.js"],"names":["React","useState","useCallback","Dropdown","DropdownToggle","DropdownMenu","DropdownItem","MySetting","props","isOpen","setIsOpen","dropdownOpen","setDropdownOpen","toggle","submenuToggle","onMouseEnter","onMouseLeave","theme","setMaxHeight","enabled","order","fn","data","styles","overflow","maxHeight"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,SAASC,QAAT,EAAmBC,cAAnB,EAAmCC,YAAnC,EAAiDC,YAAjD,QAAqE,YAArE;AACA,OAAO,sBAAP;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAC3B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACU,YAAD,EAAcC,eAAd,IAAiCX,QAAQ,CAAC,KAAD,CAA/C;;AAEE,QAAMY,MAAM,GAAG,MAAMD,eAAe,CAAC,CAACD,YAAF,CAApC;;AACA,QAAMG,aAAa,GAAG,MAAMJ,SAAS,CAAC,CAACD,MAAF,CAArC;;AAEA,QAAMM,YAAY,GAAGb,WAAW,CAAC,MAAM;AACrCU,IAAAA,eAAe,CAAC,IAAD,CAAf;AACD,GAF+B,EAE9B,CAACA,eAAD,CAF8B,CAAhC;AAIA,QAAMI,YAAY,GAAGd,WAAW,CAAC,MAAM;AACrCU,IAAAA,eAAe,CAAC,KAAD,CAAf;AACD,GAF+B,EAE9B,CAACA,eAAD,CAF8B,CAAhC;AAKA,SACE,oBAAC,QAAD;AAAU,IAAA,SAAS,EAAEJ,KAAK,CAACS,KAA3B;AAAkC,IAAA,WAAW,EAAEF,YAA/C;AAA6D,IAAA,YAAY,EAAEC,YAA3E;AAAyF,IAAA,MAAM,EAAEL,YAAjG;AAA+G,IAAA,MAAM,EAAEE,MAAvH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,cAAD;AAAgB,IAAA,GAAG,EAAC,QAApB;AAA6B,IAAA,IAAI,EAAC,QAAlC;AAA2C,IAAA,SAAS,EAAC,sBAArD;AAA4E,IAAA,KAAK,MAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAIE,oBAAC,YAAD;AAAe,IAAA,KAAK,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,QAAD;AAAU,IAAA,MAAM,EAAEJ,MAAlB;AAA0B,IAAA,MAAM,EAAEK,aAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAIE,oBAAC,YAAD;AACE,IAAA,SAAS,EAAE;AACTI,MAAAA,YAAY,EAAE;AACZC,QAAAA,OAAO,EAAE,IADG;AAEZC,QAAAA,KAAK,EAAE,GAFK;AAGZC,QAAAA,EAAE,EAAGC,IAAD,IAAU;AACZ,iBAAO,EACL,GAAGA,IADE;AAELC,YAAAA,MAAM,EAAE,EACN,GAAGD,IAAI,CAACC,MADF;AAENC,cAAAA,QAAQ,EAAE,MAFJ;AAGNC,cAAAA,SAAS,EAAE;AAHL;AAFH,WAAP;AAQD;AAZW;AADL,KADb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAkBE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAlBF,EAmBE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAnBF,CAJF,CADF,CADF,EA6BE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBA7BF,EA8BE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA9BF,CAJF,CADF;AAuCD,CAvDH;;AAyDE,eAAelB,SAAf","sourcesContent":["import React, { useState, useCallback } from 'react';\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\nimport '../css/MySetting.css';\n\nconst MySetting = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [dropdownOpen,setDropdownOpen] = useState(false);\n\n    const toggle = () => setDropdownOpen(!dropdownOpen);\n    const submenuToggle = () => setIsOpen(!isOpen);\n\n    const onMouseEnter = useCallback(() => {\n      setDropdownOpen(true);\n    },[setDropdownOpen]);\n  \n    const onMouseLeave = useCallback(() => {\n      setDropdownOpen(false);\n    },[setDropdownOpen]);\n  \n\n    return (\n      <Dropdown className={props.theme} onMouseOver={onMouseEnter} onMouseLeave={onMouseLeave} isOpen={dropdownOpen} toggle={toggle}>\n        <DropdownToggle tag=\"button\" type=\"button\" className=\"my-button my-setting\" caret>\n          <i className=\"fa fa-cog\"></i>\n        </DropdownToggle>\n        <DropdownMenu  right>\n          <DropdownItem>\n            <Dropdown isOpen={isOpen} toggle={submenuToggle}>\n              <DropdownToggle>\n                Dropdown\n              </DropdownToggle>\n              <DropdownMenu\n                modifiers={{\n                  setMaxHeight: {\n                    enabled: true,\n                    order: 890,\n                    fn: (data) => {\n                      return {\n                        ...data,\n                        styles: {\n                          ...data.styles,\n                          overflow: 'auto',\n                          maxHeight: '100px',\n                        },\n                      };\n                    },\n                  },\n                }}\n              >\n                <DropdownItem>Another Action</DropdownItem>\n                <DropdownItem>Another Action</DropdownItem>\n              </DropdownMenu>\n            </Dropdown>\n          </DropdownItem>\n          <DropdownItem>Voice Over</DropdownItem>\n          <DropdownItem>Logout</DropdownItem>\n        </DropdownMenu>\n      </Dropdown>\n    );\n  }\n\n  export default MySetting;"]},"metadata":{},"sourceType":"module"}