{"ast":null,"code":"var _jsxFileName = \"/home/user23/docker2/pinly-react-project/Pinly-React/src/components/MySetting.js\";\nimport React, { useState, useCallback } from 'react';\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\nimport '../css/MySetting.css';\n\nconst MySetting = props => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n\n  const toggle = () => setDropdownOpen(!dropdownOpen);\n\n  const submenuToggle = () => setIsOpen(!isOpen);\n\n  const onMouseEnter = useCallback(() => {\n    setDropdownOpen(true);\n  }, [setDropdownOpen]);\n  const onMouseLeave = useCallback(() => {\n    setDropdownOpen(false);\n  }, [setDropdownOpen]);\n  const onMouseEnterSubmenu = useCallback(() => {\n    setIsOpen(true);\n  }, [setIsOpen]);\n  const onMouseLeaveSubmenu = useCallback(() => {\n    setIsOpen(false);\n  }, [setIsOpen]);\n  return React.createElement(Dropdown, {\n    className: props.theme,\n    onMouseOver: onMouseEnter,\n    onMouseLeave: onMouseLeave,\n    isOpen: dropdownOpen,\n    toggle: toggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(DropdownToggle, {\n    tag: \"button\",\n    type: \"button\",\n    className: \"my-button my-setting\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"fa fa-cog\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  })), React.createElement(DropdownMenu, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(DropdownItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    class: \"dropdown-menu\",\n    role: \"menu\",\n    \"aria-labelledby\": \"dLabel\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"Language\", React.createElement(\"li\", {\n    class: \"dropdown-submenu\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(\"a\", {\n    tabindex: \"-1\",\n    href: \"#\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"More options\"), React.createElement(\"ul\", {\n    class: \"dropdown-menu\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, \"EN\"), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, \"TH\"))))), React.createElement(DropdownItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"Voice Over\"), React.createElement(DropdownItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"Logout\")));\n};\n\nexport default MySetting;","map":{"version":3,"sources":["/home/user23/docker2/pinly-react-project/Pinly-React/src/components/MySetting.js"],"names":["React","useState","useCallback","Dropdown","DropdownToggle","DropdownMenu","DropdownItem","MySetting","props","isOpen","setIsOpen","dropdownOpen","setDropdownOpen","toggle","submenuToggle","onMouseEnter","onMouseLeave","onMouseEnterSubmenu","onMouseLeaveSubmenu","theme"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,SAASC,QAAT,EAAmBC,cAAnB,EAAmCC,YAAnC,EAAiDC,YAAjD,QAAqE,YAArE;AACA,OAAO,sBAAP;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAC3B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACU,YAAD,EAAcC,eAAd,IAAiCX,QAAQ,CAAC,KAAD,CAA/C;;AAEE,QAAMY,MAAM,GAAG,MAAMD,eAAe,CAAC,CAACD,YAAF,CAApC;;AACA,QAAMG,aAAa,GAAG,MAAMJ,SAAS,CAAC,CAACD,MAAF,CAArC;;AAEA,QAAMM,YAAY,GAAGb,WAAW,CAAC,MAAM;AACrCU,IAAAA,eAAe,CAAC,IAAD,CAAf;AACD,GAF+B,EAE9B,CAACA,eAAD,CAF8B,CAAhC;AAIA,QAAMI,YAAY,GAAGd,WAAW,CAAC,MAAM;AACrCU,IAAAA,eAAe,CAAC,KAAD,CAAf;AACD,GAF+B,EAE9B,CAACA,eAAD,CAF8B,CAAhC;AAIA,QAAMK,mBAAmB,GAAGf,WAAW,CAAC,MAAM;AAC5CQ,IAAAA,SAAS,CAAC,IAAD,CAAT;AACD,GAFsC,EAErC,CAACA,SAAD,CAFqC,CAAvC;AAIA,QAAMQ,mBAAmB,GAAGhB,WAAW,CAAC,MAAM;AAC5CQ,IAAAA,SAAS,CAAC,KAAD,CAAT;AACD,GAFsC,EAErC,CAACA,SAAD,CAFqC,CAAvC;AAKA,SACE,oBAAC,QAAD;AAAU,IAAA,SAAS,EAAEF,KAAK,CAACW,KAA3B;AAAkC,IAAA,WAAW,EAAEJ,YAA/C;AAA6D,IAAA,YAAY,EAAEC,YAA3E;AAAyF,IAAA,MAAM,EAAEL,YAAjG;AAA+G,IAAA,MAAM,EAAEE,MAAvH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,cAAD;AAAgB,IAAA,GAAG,EAAC,QAApB;AAA6B,IAAA,IAAI,EAAC,QAAlC;AAA2C,IAAA,SAAS,EAAC,sBAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAIE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAI,IAAA,KAAK,EAAC,eAAV;AAA0B,IAAA,IAAI,EAAC,MAA/B;AAAsC,uBAAgB,QAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAEI;AAAI,IAAA,KAAK,EAAC,kBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,QAAQ,EAAC,IAAZ;AAAiB,IAAA,IAAI,EAAC,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAEE;AAAI,IAAA,KAAK,EAAC,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF,CAFF,CAFJ,CADA,CADF,EAaE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAbF,EAcE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAdF,CAJF,CADF;AAuBD,CA/CH;;AAiDE,eAAeN,SAAf","sourcesContent":["import React, { useState, useCallback } from 'react';\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\nimport '../css/MySetting.css';\n\nconst MySetting = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [dropdownOpen,setDropdownOpen] = useState(false);\n\n    const toggle = () => setDropdownOpen(!dropdownOpen);\n    const submenuToggle = () => setIsOpen(!isOpen);\n\n    const onMouseEnter = useCallback(() => {\n      setDropdownOpen(true);\n    },[setDropdownOpen]);\n  \n    const onMouseLeave = useCallback(() => {\n      setDropdownOpen(false);\n    },[setDropdownOpen]);\n\n    const onMouseEnterSubmenu = useCallback(() => {\n      setIsOpen(true);\n    },[setIsOpen]);\n  \n    const onMouseLeaveSubmenu = useCallback(() => {\n      setIsOpen(false);\n    },[setIsOpen]);\n  \n\n    return (\n      <Dropdown className={props.theme} onMouseOver={onMouseEnter} onMouseLeave={onMouseLeave} isOpen={dropdownOpen} toggle={toggle}>\n        <DropdownToggle tag=\"button\" type=\"button\" className=\"my-button my-setting\">\n          <i className=\"fa fa-cog\"></i>\n        </DropdownToggle>\n        <DropdownMenu>\n          <DropdownItem>\n          <ul class=\"dropdown-menu\" role=\"menu\" aria-labelledby=\"dLabel\">\n              Language\n              <li class=\"dropdown-submenu\">\n                <a tabindex=\"-1\" href=\"#\">More options</a>\n                <ul class=\"dropdown-menu\">\n                  <li>EN</li>\n                  <li>TH</li>\n                </ul>\n              </li>\n            </ul>\n          </DropdownItem>\n          <DropdownItem>Voice Over</DropdownItem>\n          <DropdownItem>Logout</DropdownItem>\n        </DropdownMenu>\n      </Dropdown>\n    );\n  }\n\n  export default MySetting;"]},"metadata":{},"sourceType":"module"}