{"ast":null,"code":"var _jsxFileName = \"/home/user23/docker2/pinly-react-project/Pinly-React/src/modules/components/button/MyDropdown.js\";\nimport React, { useState, useCallback } from 'react';\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\nimport './MyButton.css';\nimport { Link } from 'react-router-dom';\n\nconst MyDropdown = props => {\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n\n  const toggle = () => setDropdownOpen(!dropdownOpen);\n\n  const onMouseEnter = useCallback(() => {\n    setDropdownOpen(true);\n  }, [setDropdownOpen]);\n  const onMouseLeave = useCallback(() => {\n    setDropdownOpen(false);\n  }, [setDropdownOpen]);\n  return React.createElement(Dropdown, {\n    className: props.theme,\n    onMouseOver: onMouseEnter,\n    onMouseLeave: onMouseLeave,\n    isOpen: dropdownOpen,\n    toggle: toggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, React.createElement(DropdownToggle, {\n    tag: \"button\",\n    type: \"button\",\n    className: \"my-button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, props.titleType === 'text' ? props.title : React.createElement(\"i\", {\n    className: props.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  })), React.createElement(DropdownMenu, {\n    right: props.alignment === 'right',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, props.items.map((item, key) => React.createElement(DropdownItem, {\n    key: key,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: '/' + item.toLowerCase(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, item)))));\n};\n\nexport default MyDropdown;","map":{"version":3,"sources":["/home/user23/docker2/pinly-react-project/Pinly-React/src/modules/components/button/MyDropdown.js"],"names":["React","useState","useCallback","Dropdown","DropdownToggle","DropdownMenu","DropdownItem","Link","MyDropdown","props","dropdownOpen","setDropdownOpen","toggle","onMouseEnter","onMouseLeave","theme","titleType","title","alignment","items","map","item","key","toLowerCase"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,SAASC,QAAT,EAAmBC,cAAnB,EAAmCC,YAAnC,EAAiDC,YAAjD,QAAqE,YAArE;AACA,OAAO,gBAAP;AACA,SAASC,IAAT,QAAqB,kBAArB;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAC5B,QAAM,CAACC,YAAD,EAAcC,eAAd,IAAiCV,QAAQ,CAAC,KAAD,CAA/C;;AAEE,QAAMW,MAAM,GAAG,MAAMD,eAAe,CAAC,CAACD,YAAF,CAApC;;AAEA,QAAMG,YAAY,GAAGX,WAAW,CAAC,MAAM;AACrCS,IAAAA,eAAe,CAAC,IAAD,CAAf;AACD,GAF+B,EAE9B,CAACA,eAAD,CAF8B,CAAhC;AAIA,QAAMG,YAAY,GAAGZ,WAAW,CAAC,MAAM;AACrCS,IAAAA,eAAe,CAAC,KAAD,CAAf;AACD,GAF+B,EAE9B,CAACA,eAAD,CAF8B,CAAhC;AAIA,SACE,oBAAC,QAAD;AAAU,IAAA,SAAS,EAAEF,KAAK,CAACM,KAA3B;AAAkC,IAAA,WAAW,EAAEF,YAA/C;AAA6D,IAAA,YAAY,EAAEC,YAA3E;AAAyF,IAAA,MAAM,EAAEJ,YAAjG;AAA+G,IAAA,MAAM,EAAEE,MAAvH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,cAAD;AAAgB,IAAA,GAAG,EAAC,QAApB;AAA6B,IAAA,IAAI,EAAC,QAAlC;AAA2C,IAAA,SAAS,EAAC,WAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,KAAK,CAACO,SAAN,KAAoB,MAApB,GAA6BP,KAAK,CAACQ,KAAnC,GAA2C;AAAG,IAAA,SAAS,EAAER,KAAK,CAACQ,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAD9C,CADF,EAIE,oBAAC,YAAD;AAAe,IAAA,KAAK,EAAER,KAAK,CAACS,SAAN,KAAoB,OAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGT,KAAK,CAACU,KAAN,CAAYC,GAAZ,CAAgB,CAACC,IAAD,EAAMC,GAAN,KAAc,oBAAC,YAAD;AAAc,IAAA,GAAG,EAAEA,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwB,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAE,MAAID,IAAI,CAACE,WAAL,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmCF,IAAnC,CAAxB,CAA9B,CADH,CAJF,CADF;AAUD,CAvBH;;AAyBE,eAAeb,UAAf","sourcesContent":["import React, { useState, useCallback } from 'react';\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\nimport './MyButton.css';\nimport { Link } from 'react-router-dom';\n\nconst MyDropdown = (props) => {\n  const [dropdownOpen,setDropdownOpen] = useState(false);\n\n    const toggle = () => setDropdownOpen(!dropdownOpen);\n\n    const onMouseEnter = useCallback(() => {\n      setDropdownOpen(true);\n    },[setDropdownOpen]);\n  \n    const onMouseLeave = useCallback(() => {\n      setDropdownOpen(false);\n    },[setDropdownOpen]);\n\n    return (\n      <Dropdown className={props.theme} onMouseOver={onMouseEnter} onMouseLeave={onMouseLeave} isOpen={dropdownOpen} toggle={toggle}>\n        <DropdownToggle tag=\"button\" type=\"button\" className=\"my-button\">\n          {props.titleType === 'text' ? props.title : <i className={props.title}></i>}\n        </DropdownToggle>\n        <DropdownMenu  right={props.alignment === 'right'}>\n          {props.items.map((item,key) => <DropdownItem key={key}><Link to={'/'+item.toLowerCase()}>{item}</Link></DropdownItem>)}\n        </DropdownMenu>\n      </Dropdown>\n    );\n  }\n\n  export default MyDropdown;"]},"metadata":{},"sourceType":"module"}