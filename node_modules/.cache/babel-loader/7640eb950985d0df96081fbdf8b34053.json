{"ast":null,"code":"var _jsxFileName = \"/home/user23/docker2/pinly-react-project/Pinly-React/src/components/MyDropdown.js\";\nimport React from 'react';\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\nimport '../css/MyButton.css';\n\nconst MyDropdown = props => {\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n\n  const toggle = () => setDropdownOpen(!dropdownOpen);\n\n  const onMouseEnter = useCallback(() => {\n    setDropdownOpen(true);\n  }, [setDropdownOpen]);\n  const onMouseLeave = useCallback(() => {\n    setDropdownOpen(false);\n  }, [setDropdownOpen]);\n  return React.createElement(Dropdown, {\n    className: this.props.theme,\n    onMouseOver: this.onMouseEnter,\n    onMouseLeave: this.onMouseLeave,\n    isOpen: this.state.dropdownOpen,\n    toggle: this.toggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, React.createElement(DropdownToggle, {\n    tag: \"button\",\n    type: \"button\",\n    className: \"my-button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, this.props.titleType === 'text' ? this.props.title : React.createElement(\"i\", {\n    className: this.props.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  })), React.createElement(DropdownMenu, {\n    right: this.props.alignment === 'right',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, this.props.items.map((item, key) => React.createElement(DropdownItem, {\n    key: key,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(\"a\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, item)))));\n};\n\nexport default MyDropdown;","map":{"version":3,"sources":["/home/user23/docker2/pinly-react-project/Pinly-React/src/components/MyDropdown.js"],"names":["React","Dropdown","DropdownToggle","DropdownMenu","DropdownItem","MyDropdown","props","dropdownOpen","setDropdownOpen","useState","toggle","onMouseEnter","useCallback","onMouseLeave","theme","state","titleType","title","alignment","items","map","item","key"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,cAAnB,EAAmCC,YAAnC,EAAiDC,YAAjD,QAAqE,YAArE;AACA,OAAO,qBAAP;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAC5B,QAAM,CAACC,YAAD,EAAcC,eAAd,IAAiCC,QAAQ,CAAC,KAAD,CAA/C;;AAEE,QAAMC,MAAM,GAAG,MAAMF,eAAe,CAAC,CAACD,YAAF,CAApC;;AAEA,QAAMI,YAAY,GAAGC,WAAW,CAAC,MAAM;AACrCJ,IAAAA,eAAe,CAAC,IAAD,CAAf;AACD,GAF+B,EAE9B,CAACA,eAAD,CAF8B,CAAhC;AAIA,QAAMK,YAAY,GAAGD,WAAW,CAAC,MAAM;AACrCJ,IAAAA,eAAe,CAAC,KAAD,CAAf;AACD,GAF+B,EAE9B,CAACA,eAAD,CAF8B,CAAhC;AAIA,SACE,oBAAC,QAAD;AAAU,IAAA,SAAS,EAAE,KAAKF,KAAL,CAAWQ,KAAhC;AAAuC,IAAA,WAAW,EAAE,KAAKH,YAAzD;AAAuE,IAAA,YAAY,EAAE,KAAKE,YAA1F;AAAwG,IAAA,MAAM,EAAE,KAAKE,KAAL,CAAWR,YAA3H;AAAyI,IAAA,MAAM,EAAE,KAAKG,MAAtJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,cAAD;AAAgB,IAAA,GAAG,EAAC,QAApB;AAA6B,IAAA,IAAI,EAAC,QAAlC;AAA2C,IAAA,SAAS,EAAC,WAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,KAAKJ,KAAL,CAAWU,SAAX,KAAyB,MAAzB,GAAkC,KAAKV,KAAL,CAAWW,KAA7C,GAAqD;AAAG,IAAA,SAAS,EAAE,KAAKX,KAAL,CAAWW,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADxD,CADF,EAIE,oBAAC,YAAD;AAAe,IAAA,KAAK,EAAE,KAAKX,KAAL,CAAWY,SAAX,KAAyB,OAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,KAAKZ,KAAL,CAAWa,KAAX,CAAiBC,GAAjB,CAAqB,CAACC,IAAD,EAAMC,GAAN,KAAc,oBAAC,YAAD;AAAc,IAAA,GAAG,EAAEA,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAID,IAAJ,CAAxB,CAAnC,CADH,CAJF,CADF;AAUD,CAvBH;;AAyBE,eAAehB,UAAf","sourcesContent":["import React from 'react';\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\nimport '../css/MyButton.css';\n\nconst MyDropdown = (props) => {\n  const [dropdownOpen,setDropdownOpen] = useState(false);\n\n    const toggle = () => setDropdownOpen(!dropdownOpen);\n\n    const onMouseEnter = useCallback(() => {\n      setDropdownOpen(true);\n    },[setDropdownOpen]);\n  \n    const onMouseLeave = useCallback(() => {\n      setDropdownOpen(false);\n    },[setDropdownOpen]);\n\n    return (\n      <Dropdown className={this.props.theme} onMouseOver={this.onMouseEnter} onMouseLeave={this.onMouseLeave} isOpen={this.state.dropdownOpen} toggle={this.toggle}>\n        <DropdownToggle tag=\"button\" type=\"button\" className=\"my-button\">\n          {this.props.titleType === 'text' ? this.props.title : <i className={this.props.title}></i>}\n        </DropdownToggle>\n        <DropdownMenu  right={this.props.alignment === 'right'}>\n          {this.props.items.map((item,key) => <DropdownItem key={key}><a>{item}</a></DropdownItem>)}\n        </DropdownMenu>\n      </Dropdown>\n    );\n  }\n\n  export default MyDropdown;"]},"metadata":{},"sourceType":"module"}