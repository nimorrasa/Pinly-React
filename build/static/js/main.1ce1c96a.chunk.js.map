{"version":3,"sources":["images/logo.png","fonts/rsufont/RSU_Regular.ttf","fonts/rsufont/RSU_light.ttf","fonts/rsufont/RSU_BOLD.ttf","components/ThemeSwitch.js","components/MyDropdown.js","components/MySetting.js","components/MyButton.js","components/MyNavbar.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ThemeSwitch","props","useState","isDark","setIsDark","className","type","id","value","onChange","new_theme","onChangeTheme","defaultChecked","htmlFor","MyDropdown","dropdownOpen","setDropdownOpen","onMouseEnter","useCallback","onMouseLeave","Dropdown","theme","onMouseOver","isOpen","toggle","DropdownToggle","tag","titleType","title","DropdownMenu","right","alignment","items","map","item","key","DropdownItem","MySetting","MyButton","MyNavbar","setIsOpen","setTheme","handleThemeChange","current_theme","Navbar","bg","light","dark","expand","NavbarBrand","href","Media","src","logo","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","Home","navbarTheme","alt","Container","Row","Button","style","borderWidth","borderRadius","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1ce1c96a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.1eb45792.png\";","module.exports = __webpack_public_path__ + \"static/media/RSU_Regular.78cad10a.ttf\";","module.exports = __webpack_public_path__ + \"static/media/RSU_light.cdd9e6d5.ttf\";","module.exports = __webpack_public_path__ + \"static/media/RSU_BOLD.f55f1863.ttf\";","import React, { useState, useCallback } from 'react';\nimport '../css/ThemeSwitch.css';\n\nconst ThemeSwitch = (props) => {\n\n  const [isDark,setIsDark] = useState(props.isDark);\n\n  const handleChange = () => {\n    let new_theme = !isDark;\n    setIsDark(new_theme);\n    props.onChangeTheme(new_theme)\n  };\n\n  return (\n    <button className=\"icon-button\">\n      <input\n        type=\"checkbox\"\n        className=\"checkbox\"\n        id=\"night-mode\"\n        value={isDark}\n        onChange={handleChange}\n        defaultChecked={isDark}\n        />\n      <label htmlFor=\"night-mode\" className=\"label\">\n        <i className=\"fa fa-sun-o\"></i>\n        <i className=\"fa fa-moon-o\"></i>\n        <div className=\"blob\"></div>\n      </label>\n    </button>\n  );\n}\n\nexport default ThemeSwitch;","import React, { useState, useCallback } from 'react';\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\nimport '../css/MyButton.css';\n\nconst MyDropdown = (props) => {\n  const [dropdownOpen,setDropdownOpen] = useState(false);\n\n    const toggle = () => setDropdownOpen(!dropdownOpen);\n\n    const onMouseEnter = useCallback(() => {\n      setDropdownOpen(true);\n    },[setDropdownOpen]);\n  \n    const onMouseLeave = useCallback(() => {\n      setDropdownOpen(false);\n    },[setDropdownOpen]);\n\n    return (\n      <Dropdown className={props.theme} onMouseOver={onMouseEnter} onMouseLeave={onMouseLeave} isOpen={dropdownOpen} toggle={toggle}>\n        <DropdownToggle tag=\"button\" type=\"button\" className=\"my-button\">\n          {props.titleType === 'text' ? props.title : <i className={props.title}></i>}\n        </DropdownToggle>\n        <DropdownMenu  right={props.alignment === 'right'}>\n          {props.items.map((item,key) => <DropdownItem key={key}><a>{item}</a></DropdownItem>)}\n        </DropdownMenu>\n      </Dropdown>\n    );\n  }\n\n  export default MyDropdown;","import React, { useState, useCallback } from 'react';\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\nimport '../css/MySetting.css';\n\nconst MySetting = (props) => {\n  const [dropdownOpen,setDropdownOpen] = useState(false);\n\n    const toggle = () => setDropdownOpen(!dropdownOpen);\n\n    const onMouseEnter = useCallback(() => {\n      setDropdownOpen(true);\n    },[setDropdownOpen]);\n  \n    const onMouseLeave = useCallback(() => {\n      setDropdownOpen(false);\n    },[setDropdownOpen]);\n\n\n    return (\n      <Dropdown className={props.theme} onMouseOver={onMouseEnter} onMouseLeave={onMouseLeave} isOpen={dropdownOpen} toggle={toggle}>\n        <DropdownToggle tag=\"button\" type=\"button\" className=\"my-button my-setting\">\n          <i className=\"fa fa-cog\"></i>\n        </DropdownToggle>\n        <DropdownMenu  right>\n          <DropdownItem className='my-language'>Language <a>TH</a>/<a>EN</a></DropdownItem>\n          <DropdownItem><a>Voice Over</a></DropdownItem>\n          <DropdownItem><a>Logout</a></DropdownItem>\n        </DropdownMenu>\n      </Dropdown>\n    );\n  }\n\n  export default MySetting;","import React from 'react';\nimport '../css/MyButton.css';\n\nconst MyButton = (props) => {\n\n    if(props.type === 'icon') {\n      return (\n        <button tag=\"button\" type=\"button\" className=\"my-button\"><i className={props.title}></i></button>\n        );\n    }\n    \n    return (\n      <button tag=\"button\" type=\"button\" className=\"my-button\">{props.title}</button>\n    );\n\n}\n\n  export default MyButton;","import React, { useState, useCallback } from 'react';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  Media\n} from 'reactstrap';\nimport ThemeSwitch from './ThemeSwitch.js';\nimport MyDropdown from './MyDropdown.js';\nimport MySetting from './MySetting.js';\nimport MyButton from './MyButton.js';\nimport logo from '../images/logo.png';\n\n\nconst MyNavbar = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isDark, setIsDark] = useState((props.theme === 'dark'));\n  const [theme, setTheme] = useState(props.theme);\n\n  const toggle = () => setIsOpen(!isOpen);\n\n  const handleThemeChange = useCallback((new_theme) => {\n    const current_theme = new_theme ? 'dark' : 'light';\n    setIsDark(new_theme);\n    setTheme(current_theme);\n    props.onChangeTheme(current_theme);\n  },[setIsDark,setTheme]);\n\n  return (\n    <div>\n      <Navbar className={'theme_'+theme} bg={theme} light={theme === 'light'} dark={theme === 'dark'}  expand=\"md\">\n        <NavbarBrand href=\"/\">\n            <Media className=\"App-header-logo\"  src={logo}></Media>\n        </NavbarBrand>\n        <NavbarToggler onClick={toggle} />\n        <Collapse isOpen={isOpen} navbar>\n          <Nav className=\"mr-auto\" navbar>\n            <NavItem>\n              <MyButton type=\"text\" title=\"Home\"></MyButton>\n            </NavItem>\n            <NavItem>\n              <MyButton type=\"text\" title=\"Profile\"></MyButton>\n            </NavItem>\n            <NavItem>\n              <MyDropdown theme={theme} alignment=\"left\" titleType=\"text\" title=\"Sleep Test\" items={[\"sleep score\",\"sleep form\"]}></MyDropdown>\n            </NavItem>\n            <NavItem>\n              <MyButton type=\"text\" title=\"Setting\"></MyButton>\n            </NavItem>\n            <NavItem>\n              <MyButton type=\"icon\" title=\"fa fa-question-circle\"></MyButton>\n            </NavItem>\n          </Nav>\n          <Nav className=\"mr-auto-right\" navbar>\n            <NavItem>\n              <ThemeSwitch isDark={isDark} onChangeTheme={handleThemeChange}></ThemeSwitch>\n            </NavItem>\n            <NavItem>\n              <MySetting theme={theme}></MySetting>\n            </NavItem>\n          </Nav>\n        </Collapse>\n      </Navbar>\n    </div>\n  );\n}\n\nexport default MyNavbar;","import React, { useState, useCallback } from 'react';\nimport { Button, Container, Row } from 'reactstrap';\nimport MyNavbar from '../components/MyNavbar.js';\nimport logo from '../images/logo.png';\nimport '../css/MyTheme.css';\n\nconst Home = (props) => {\n  const [theme, setTheme] = useState('theme_dark');\n\n  const handleThemeChange = useCallback((current_theme) => {\n    setTheme('theme_'+current_theme);\n  },[setTheme]);\n\n  let navbarTheme = theme === 'theme_dark' ? 'dark' : 'light';\n\n  return (\n    <div className={\"App Home \"+theme}>\n    <MyNavbar theme={navbarTheme} onChangeTheme={handleThemeChange}></MyNavbar>\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n      <div>\n        <Container className={\"App-content \"+theme}>\n            <Row className=\"Link-padding\">\n                 <a className=\"App-link\" href=\"#login\">Login</a> | <a className=\"App-link\" href=\"#sign_up\">Sign Up</a>\n            </Row>\n            <Row>\n                <Button style={{borderWidth: 2, borderRadius: 20 }} className=\"App-button\">GET STARTED</Button>\n            </Row>\n        </Container>\n      </div>\n    </div>\n  );\n}\n\nexport default Home;","import React from 'react';\nimport './fonts/rsufont/RSU_Regular.ttf'\nimport './fonts/rsufont/RSU_light.ttf'\nimport './fonts/rsufont/RSU_BOLD.ttf'\nimport './css/App.css';\nimport Home from './pages/Home.js';\n\nfunction App() {\n  return (\n    <Home theme=\"theme_dark\"></Home>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}