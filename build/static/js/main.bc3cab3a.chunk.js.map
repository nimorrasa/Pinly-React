{"version":3,"sources":["logo.svg","components/logo.png","components/ThemeSwitch.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ThemeSwitch","className","type","name","id","htmlFor","React","Component","Header","Navbar","bg","expand","Brand","href","Image","src","logo","style","height","width","rounded","Toggle","aria-controls","Collapse","Nav","Link","NavDropdown","title","components","DropdownIndicator","Item","eventKey","App","alt","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oHAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,2PCE9BC,EAAb,iLASM,OACE,yBAAKC,UAAU,iBACf,2BACEC,KAAK,WACLD,UAAU,yBACVE,KAAK,eACLC,GAAG,iBAEL,2BAAOH,UAAU,sBAAsBI,QAAQ,gBAC7C,0BAAMJ,UAAU,wBAChB,0BAAMA,UAAU,+BAnB1B,GAAiCK,IAAMC,W,yBCM1BC,EAAb,iLASM,OACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MACxB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,SACnB,kBAACC,EAAA,EAAD,CAAOC,IAAKC,IAAMC,MAAO,CAACC,OAAO,OAAOC,MAAM,QAASC,SAAO,KAE9D,kBAACX,EAAA,EAAOY,OAAR,CAAeC,gBAAc,qBAC7B,kBAACb,EAAA,EAAOc,SAAR,CAAiBnB,GAAG,oBAClB,kBAACoB,EAAA,EAAD,CAAKvB,UAAU,WACb,kBAACuB,EAAA,EAAIC,KAAL,CAAUZ,KAAK,SAAf,QACA,kBAACa,EAAA,EAAD,CACEC,MAAM,aACNvB,GAAG,qBACHwB,WAAY,CAAEC,kBAAkB,kBAAM,QAEtC,kBAACH,EAAA,EAAYI,KAAb,CAAkBjB,KAAK,eAAvB,eACA,kBAACa,EAAA,EAAYI,KAAb,CAAkBjB,KAAK,eAAvB,eAEF,kBAACW,EAAA,EAAIC,KAAL,CAAUZ,KAAK,YAAf,WACA,kBAACW,EAAA,EAAIC,KAAL,CAAUZ,KAAK,SAAf,QACA,kBAACW,EAAA,EAAIC,KAAL,CAAUZ,KAAK,SAAf,YAEF,kBAACW,EAAA,EAAD,KACE,kBAACA,EAAA,EAAIC,KAAL,CAAUZ,KAAK,UACf,kBAAC,EAAD,OAEA,kBAACW,EAAA,EAAIC,KAAL,CAAUM,SAAU,EAAGlB,KAAK,UAA5B,qBAlCd,GAA4BP,IAAMC,WCmBnByB,MAtBf,WACE,OACE,yBAAK/B,UAAU,OACf,kBAAC,EAAD,gBACE,4BAAQA,UAAU,cAChB,yBAAKc,IAAKC,IAAMf,UAAU,WAAWgC,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACEhC,UAAU,WACVY,KAAK,sBACLqB,OAAO,SACPC,IAAI,uBAJN,kBCFYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bc3cab3a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.aceb6152.png\";","import React, { Component } from \"react\";\n\nexport class ThemeSwitch extends React.Component {\n    // constructor(props) {\n    //   super(props);\n    //   this.state = {\n    //     value: null,\n    //   };\n    // }\n  \n    render() {\n      return (\n        <div className=\"toggle-switch\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle-switch-checkbox\"\n          name=\"toggleSwitch\"\n          id=\"toggleSwitch\"\n        />\n        <label className=\"toggle-switch-label\" htmlFor=\"toggleSwitch\">\n          <span className=\"toggle-switch-inner\" />\n          <span className=\"toggle-switch-switch\" />\n        </label>\n      </div>\n      );\n    }\n  }\n","import React from 'react';\nimport { Nav } from 'react-bootstrap';\nimport { Navbar } from 'react-bootstrap';\nimport { NavDropdown } from 'react-bootstrap';\nimport { ThemeSwitch } from './ThemeSwitch.js';\nimport { Image } from 'react-bootstrap';\nimport logo from './logo.png';\n\nexport class Header extends React.Component {\n    // constructor(props) {\n    //   super(props);\n    //   this.state = {\n    //     value: null,\n    //   };\n    // }\n  \n    render() {\n      return (\n        <Navbar bg=\"light\" expand=\"lg\">\n          <Navbar.Brand href=\"#home\">\n          <Image src={logo} style={{height:'50px',width:'50px'}} rounded/>\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              <Nav.Link href=\"#home\">Home</Nav.Link>\n              <NavDropdown\n                title=\"Sleep Test\"\n                id=\"basic-nav-dropdown\"\n                components={{ DropdownIndicator:() => null }}\n                >\n                <NavDropdown.Item href=\"#action/3.1\">Sleep score</NavDropdown.Item>\n                <NavDropdown.Item href=\"#action/3.2\">Sleep form</NavDropdown.Item>\n              </NavDropdown>\n              <Nav.Link href=\"#setting\">Setting</Nav.Link>\n              <Nav.Link href=\"#help\">Help</Nav.Link>\n              <Nav.Link href=\"#link\">Profile</Nav.Link>\n            </Nav>\n            <Nav>\n              <Nav.Link href=\"#deets\">\n              <ThemeSwitch></ThemeSwitch>\n              </Nav.Link>\n              <Nav.Link eventKey={2} href=\"#memes\">\n                Dank memes\n              </Nav.Link>\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n      );\n    }\n  }\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Header } from './components/Header.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Header>Danger!</Header>\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}